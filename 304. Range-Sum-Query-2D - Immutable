class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        m = len(matrix)
        n = len(matrix[0])
        self.gridSum = [[0 for _ in range(n)] for _ in range(m)]
        self.gridSum[0][0] = matrix[0][0]
        for col in range(1,n):
            self.gridSum[0][col] = matrix[0][col] + self.gridSum[0][col-1]
        for row in range(1,m):
            self.gridSum[row][0] = matrix[row][0] + self.gridSum[row-1][0]
        for i in range(1,m):
            for j in range(1,n):
                self.gridSum[i][j] = matrix[i][j] + self.gridSum[i-1][j] + self.gridSum[i][j-1] - self.gridSum[i-1][j-1]

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        area1 = 0
        if row1 - 1 >= 0:
            area1 = self.gridSum[row1-1][col2]
        area2 = 0
        if col1 - 1 >= 0:
            area2 = self.gridSum[row2][col1-1]
        area3 = 0
        if row1 - 1 >= 0 and col1 - 1 >= 0:
            area3 = self.gridSum[row1-1][col1-1]
        
        return self.gridSum[row2][col2] - (area1 + area2 - area3)
        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
