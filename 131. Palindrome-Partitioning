/**
 * @param {string} s
 * @return {string[][]}
 */
var partition = function(s) {
    let n = s.length;
    let validPalindrome = Array.from({length: n}, () => new Array(n).fill(true));
    for(let left = n - 2; left >= 0; left--){
        for(let right = left + 1; right < n; right++){
            validPalindrome[left][right] = s[left] === s[right] && validPalindrome[left+1][right-1];
        }
    }
    let res = [];
    let sequence = []
    function backtrack(i){
        if(i === n){
            res.push([...sequence]);
            return;
        }
        for(let j = i; j < n; j++){
            if(validPalindrome[i][j]){
                sequence.push(s.slice(i,j+1))
                backtrack(j+1);
                sequence.pop()
            }
        }

    }

   
    backtrack(0);

    return res;
};
