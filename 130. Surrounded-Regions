/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solve = function(board) {
    let m = board.length;
    let n = board[0].length;
    let dir = [0,1,0,-1,0];
    let indexDir = 0;
    let row = 0, col = 0;
    let boundary = 0;
    if(m === 1) boundary = n;
    else if(n === 1) boundary = m;
    else boundary = 2 * m + 2 * n - 4;

    function dfs(i,j){
        if(i < 0 || i >= m || j < 0 || j >= n)
            return;
        if(board[i][j] === 'X' || board[i][j] === 'A')
            return;
        board[i][j] = 'A';
        dfs(i ,j-1);
        dfs(i, j+1);
        dfs(i-1 ,j);
        dfs(i+1, j);
    }

    for(let cnt = 0; cnt < boundary; cnt++){
        if(board[row][col] === 'O'){
            dfs(row,col);
        }
        let nextRow = row + dir[indexDir];
        let nextCol = col + dir[indexDir+1];
        if(nextRow < 0 || nextRow >= m || nextCol < 0 || nextCol >= n)
            indexDir = (indexDir + 1) % 4;
        row += dir[indexDir];
        col += dir[indexDir+1];
    }
    for(let i = 0; i < m; i++){
        for(let j = 0; j < n; j++){
            if(board[i][j] === 'A')
                board[i][j] = 'O';
            else
                board[i][j] = 'X';
        }
    }
};
