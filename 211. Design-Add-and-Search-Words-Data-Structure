class Node:
    def __init__(self):
        self.children = [None] * 26
        self.isEnd = False

class WordDictionary:

    def __init__(self):
        self.root = Node()

    def addWord(self, word: str) -> None:
        r = self.root
        for c in word:
            index = ord(c) - ord('a')
            if r.children[index] is None:
                r.children[index] = Node()
            r = r.children[index]
        r.isEnd = True

    def searchDot(self, currentNode, word):
        r = currentNode
        for index, c in enumerate(word):
            if c != '.':
                index = ord(c) - ord('a')
                if r.children[index] is None:
                    return False
                r = r.children[index]
            else:
                for i in range(26):
                    if r.children[i] and self.searchDot(r.children[i],word[index+1:]):
                        return True
                return False
        return r.isEnd
        

    def search(self, word: str) -> bool:
        return self.searchDot(self.root,word)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
