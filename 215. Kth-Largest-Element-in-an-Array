class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> pq;
        int n = nums.size();
        for(int i = 0; i < k; i++)
            pq.push(nums[i]);

        for(int i = k; i < n; i++){
            if(nums[i] >= pq.top()){
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
        
    }
};


class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        min_heap = []
        for i in range(k):
            heapq.heappush(min_heap,nums[i])
        
        for i in range(k,len(nums)):
            if nums[i] >= min_heap[0]:
                heapq.heappop(min_heap)
                heapq.heappush(min_heap,nums[i])
        
        return min_heap[0]



/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findKthLargest = function(nums, k) {
    const quickSelect = (left,right,k) => {
        if(left === right)
            return nums[left];
        let pivotIndex = partition(left,right);
        if(k === pivotIndex)
            return nums[k];
        else if(k < pivotIndex){
            return quickSelect(left,pivotIndex-1,k)
        }else
            return quickSelect(pivotIndex+1,right,k);
    }

    const partition = (left,right) => {
        let pivot = nums[right];
        let i = left - 1;
        for(let j = left; j < right; j++){
            if(nums[j] >= pivot){
                i++;
                [nums[i],nums[j]] = [nums[j],nums[i]];
            }
        }
        [nums[i+1],nums[right]] = [nums[right],nums[i+1]]
        return i + 1;
    }

    return quickSelect(0,nums.length - 1, k - 1);
};
