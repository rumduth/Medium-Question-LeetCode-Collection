class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> pq;
        int n = nums.size();
        for(int i = 0; i < k; i++)
            pq.push(nums[i]);

        for(int i = k; i < n; i++){
            if(nums[i] >= pq.top()){
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
        
    }
};


class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        min_heap = []
        for i in range(k):
            heapq.heappush(min_heap,nums[i])
        
        for i in range(k,len(nums)):
            if nums[i] >= min_heap[0]:
                heapq.heappop(min_heap)
                heapq.heappush(min_heap,nums[i])
        
        return min_heap[0]
